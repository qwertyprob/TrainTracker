@model TrainDto 
@{
    Layout = "_Layout";
    ViewData["Title"] = "Incidents";
}


<div class="container" id="content">
    
    <div class="row mt-3">
        <div class="col-12 bg-white rounded mt-4 pt-2" >
            <div class="row align-items-center">
                <div class="col-6">
                    <div class="d-flex justify-content-start align-items-center p-2 gap-2">
                        <h2 class="view-text">@Model.Name</h2>
                    </div>
                </div>

                <div class="col-6">
                    <div class="d-flex justify-content-end align-items-center p-2 gap-2">
                        <button class="btn btn-secondary active" id="tableBtn" data-bs-toggle="modal" data-bs-target="#incidentModal">
                            <i class="bi bi-pencil-square adaptive-i"></i>
                            <span class="bold adaptive-span" id="tableTxt">Add an incident</span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    @await Html.PartialAsync("Components/Modal")

    @* List of incidents *@
    <div id="incidentContainer">
    </div>


</div>
@section Scripts
{ 

    <script src="~/js/closeModal.js"></script>

    <script>

    let trainId;
    let addIncidentUrl = '@Url.Action("AddIncidentAsync", "Incident")';
    let getIncidentUrl ='@Url.Action("LoadIncidents", "Incident")'
        
    function loadIncidents(){
        trainId = @Model.Id;
        $.ajax({
    
            type: "GET",
            url: getIncidentUrl,
            data:{id:trainId},
            dataType: "html",
            success: function (html) {
                $("#incidentContainer").html(html);
            },
            error: function (xhr) {
                if (xhr.status == 400 ){
                    //
                }
            }
        });
    }

    $("#incidentForm").submit(async function(e) {
        e.preventDefault();

        // Для визуала
        $('#incidentForm .is-invalid').removeClass('is-invalid');
        
        $('#errors').html('');

        let data = JSON.stringify({
            TrainId: trainId,
            IncidentDto: {
                Username: $("#username").val(),
                Reason: $("#reason").val(),
                Comment: $("#comment").val()
            }
        });

        try {
            const response = await $.ajax({
                type: "POST",
                url: addIncidentUrl,
                contentType: "application/json",
                data: data
            });

            $("#incidentForm")[0].reset();
            $("#incidentModal").fadeOut();
            loadIncidents();
            closeModal('incidentModal');

        } catch (xhr) {
            if (xhr.status === 400) {
                const errors = xhr.responseJSON;

                for (let key in errors) {
                    const inputId = key.split('.').pop().toLowerCase();
                    const errorMessages = errors[key];
                    $('#' + inputId).addClass('is-invalid');
                }
                
            }
        }
});


    $(document).ready(function() {
        

        loadIncidents();
    });
    
    
    </script>
}


